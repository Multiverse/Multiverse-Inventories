plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'com.gradleup.shadow' version '8.3.5'
}

version = System.getenv('GITHUB_VERSION') ?: 'local'
group = 'org.mvplugins.multiverse.inventories'
description = 'Multiverse-Inventories'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// todo: Enable test when convert them to use mockbukkit like mv-core
compileTestJava {
    enabled = false
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name = 'onarandombox'
        url = uri('https://repo.onarandombox.com/content/groups/public')
    }

    maven {
        name ='papermc'
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }

    maven {
        name = 'jitpack.io'
        url = uri('https://jitpack.io/')
    }

    maven {
        name = 'benwoo1110'
        url = uri('https://repo.c0ding.party/multiverse-beta')
    }
}

dependencies {
    // Spigot
    implementation('org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT') {
        exclude group: 'junit', module: 'junit'
    }

    // Core
    // TODO update to correct version once we have it published
    implementation 'org.mvplugins.multiverse.core:multiverse-core:5.0.0-SNAPSHOT'

    // Config
    api 'com.dumptruckman.minecraft:JsonConfiguration:1.1'
    api ('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude group: 'junit', module: 'junit'
    }

    // Utils
    api 'io.papermc:paperlib:1.0.7'
    api('com.dumptruckman.minecraft:Logging:1.1.1') {
        exclude group: 'junit', module: 'junit'
    }

    // Other plugins for import
    implementation('uk.co:MultiInv:3.0.6') {
        exclude group: '*', module: '*'
    }
    implementation('me.drayshak:WorldInventories:1.0.2') {
        exclude group: '*', module: '*'
    }

    // Tests
    testImplementation 'com.github.MilkBowl:VaultAPI:1.7.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.11.2'
}


java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}


configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(shadowJar)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Multiverse/Multiverse-Inventories"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}


processResources {
    def props = [version: "${project.version}"]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }

    // This task should never be skipped. The tests depend on this having been run but we want the new version number
    // that is created after tests are run and before we run again to publish.
    outputs.upToDateWhen { false }
}


checkstyle {
    toolVersion = '6.1.1'
    configFile file('config/mv_checks.xml')
    ignoreFailures = true
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}


project.configurations.api.canBeResolved = true

shadowJar {
    relocate 'com.dumptruckman.minecraft.util.Logging', 'org.mvplugins.multiverse.inventories.utils.InvLogging'
    relocate 'com.dumptruckman.minecraft.util.DebugLog', 'org.mvplugins.multiverse.inventories.utils.DebugFileLogger'
    relocate 'com.dumptruckman.bukkit.configuration', 'org.mvplugins.multiverse.inventories.utils.configuration'
    relocate 'io.papermc.lib', 'org.mvplugins.multiverse.inventories.utils.paperlib'
    relocate 'net.minidev.json', 'org.mvplugins.multiverse.inventories.utils.json'

    configurations = [project.configurations.api]

    archiveClassifier.set('')
}

build.dependsOn shadowJar
jar.enabled = false


tasks.register('runHabitatGenerator', JavaExec) {
    classpath = configurations["compileClasspath"]
    mainClass.set('org.mvplugins.multiverse.external.jvnet.hk2.generator.HabitatGenerator')

    args = [
            '--file', "build/libs/multiverse-inventories-$version" + ".jar",
            '--locator', 'Multiverse-Inventories',
    ]
}
tasks.named("build") { finalizedBy("runHabitatGenerator") }
